extends layout

block content
  h2= title
  #obj
    .gauge
  p#log
  script(type='text/javascript')
    var uri = window.document.host;
    var socket = io.connect("http://" + uri);
    var last_update = null;
    function updateTime() {
        if (last_update)
            $("#log").html("Latest update: " + moment.duration(new Date()-last_update).seconds() + "s ago");
    }
    setInterval(updateTime, 500);
    socket.on('data', function (data) {
        d3.selectAll('g.location path').style('stroke-width', "1.5");
        d3.selectAll('g.angle-' + data.angle + ' path').style('stroke-width', "3.5")
        last_update = new Date();
        $("#obj .gauge").html(data.object + " °C");
    });
  
    var margin = {top: 20, right: 80, bottom: 30, left: 50},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    // 2012-11-09T19:29:11+01:00
    var parseDate = d3.time.format("%Y-%m-%dT%X").parse;

    var x = d3.time.scale()
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height, 0]);

    var color = d3.scale.category10();

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left");
      
    var line = d3.svg.line()
        .interpolate("basis")
        .x(function(d) { return ('undefined' != typeof(d)) ? x(d.date) : null; })
        .y(function(d) { return ('undefined' != typeof(d)) ? y(d.temperature) : null; });

    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.selectAll("line.y")
      .data(y.ticks(10))
      .enter().append("line")
      .attr("class", "y")
      .attr("x1", 0)
      .attr("x2", width)
      .attr("y1", y)
      .attr("y2", y)
      .style("stroke-width", "0.5px")
      .style("stroke", "#ccc");
      
    d3.json('/measures', function(rows) {
        var colorDomain = [];
        var labels = {'000': 'Sol', '070': 'Fenêtre', '150': 'Plafond'};
        rows.forEach(function(r) {
            r.object = parseFloat(r.object);
            r.ambiant = parseFloat(r.ambiant);
            r.date = new Date(r.date);
            r.angle = r.angle;
            if (colorDomain.indexOf(r.angle) == -1) colorDomain.push(r.angle);
        });
        color.domain(colorDomain);
        var locations = color.domain().map(function(angle) {
            return {
                name: angle,
                values: rows.filter(function(d) { return (d.angle == angle) })
                            .map(function(d) { return {date: d.date, temperature: d.object}; })
            };
        });

        x.domain(d3.extent(rows, function(d) { return d.date; }));
        y.domain([10,25]);
        svg.append("g")
           .attr("class", "x axis")
           .attr("transform", "translate(0," + height + ")")
           .call(xAxis);

        svg.append("g")
           .attr("class", "y axis")
           .call(yAxis)
           .append("text")
           .attr("transform", "rotate(-90)")
           .attr("y", 6)
           .attr("dy", ".71em")
           .style("text-anchor", "end")
           .text("Temperature (ºC)");

        var location = svg.selectAll(".location")
                .data(locations)
                .enter().append("g")
                .attr("class", function(d) { return "location angle-" + d.name });

        location.append("path")
                .attr("class", "line")
                .attr("d", function(d) { return line(d.values) })
                .style("stroke", function(d) { return color(d.name); });

        location.append("text")
                .datum(function(d) {return {name: d.name, value: d.values[0]}; })
                .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
                .attr("x", 3)
                .attr("dy", ".35em")
                .text(function(d) {
                    if ('undefined' != typeof(labels[d.name]))
                        return labels[d.name];
                    else
                        return d.name; 
                });
    });
    
